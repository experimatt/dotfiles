'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readFile = undefined;

var readFile = exports.readFile = function () {
  var _ref = _asyncToGenerator(function* (filePath, initialValue, config) {
    var contents = void 0;
    try {
      contents = (0, _stripBom2.default)((yield _sbFs2.default.readFile(filePath, 'utf8')));
    } catch (error) {
      if (error.code === 'ENOENT' && !config.createIfNonExistent) {
        return Object.assign({}, initialValue);
      }
      throw error;
    }
    try {
      return Object.assign({}, initialValue, JSON.parse(contents));
    } catch (_) {
      throw new Error('Invalid JSON found at \'' + filePath + '\'');
    }
  });

  return function readFile(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports.fillConfig = fillConfig;
exports.writeFile = writeFile;
exports.writeFileSync = writeFileSync;
exports.readFileSync = readFileSync;

var _sbFs = require('sb-fs');

var _sbFs2 = _interopRequireDefault(_sbFs);

var _stripBom = require('strip-bom');

var _stripBom2 = _interopRequireDefault(_stripBom);

var _writeFileAtomic = require('write-file-atomic');

var _writeFileAtomic2 = _interopRequireDefault(_writeFileAtomic);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function fillConfig(given) {
  var config = {};

  if (typeof given.prettyPrint !== 'undefined') {
    config.prettyPrint = !!given.prettyPrint;
  } else config.prettyPrint = true;
  if (typeof given.atomicWrites !== 'undefined') {
    config.atomicWrites = !!given.atomicWrites;
  } else config.atomicWrites = true;
  config.createIfNonExistent = !!given.createIfNonExistent;

  return config;
}

function writeFile(filePath, contents, config) {
  var stringified = JSON.stringify(contents, null, config.prettyPrint ? 2 : 0) + '\n';
  if (config.atomic) {
    return new Promise(function (resolve, reject) {
      (0, _writeFileAtomic2.default)(filePath, stringified, function (err) {
        if (err) reject();else resolve();
      });
    });
  }
  return _sbFs2.default.writeFile(filePath, stringified);
}

function writeFileSync(filePath, contents, config) {
  var stringified = JSON.stringify(contents, null, config.prettyPrint ? 2 : 0) + '\n';
  if (config.atomic) {
    _writeFileAtomic2.default.sync(filePath, stringified);
  } else {
    _sbFs2.default.writeFileSync(filePath, stringified);
  }
}

function readFileSync(filePath, initialValue, config) {
  var contents = void 0;
  try {
    contents = (0, _stripBom2.default)(_sbFs2.default.readFileSync(filePath, 'utf8'));
  } catch (error) {
    if (error.code === 'ENOENT' && !config.createIfNonExistent) {
      return Object.assign({}, initialValue);
    }
    throw error;
  }
  try {
    return Object.assign({}, initialValue, JSON.parse(contents));
  } catch (_) {
    throw new Error('Invalid JSON found at \'' + filePath + '\'');
  }
}