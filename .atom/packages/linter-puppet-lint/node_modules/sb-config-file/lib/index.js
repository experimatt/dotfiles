'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sbFs = require('sb-fs');

var _sbFs2 = _interopRequireDefault(_sbFs);

var _helpers = require('./helpers');

var Helpers = _interopRequireWildcard(_helpers);

var _objectPath = require('./object-path');

var ObjectPath = _interopRequireWildcard(_objectPath);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PRIVATE_VAR = {};

var ConfigFile = function () {
  function ConfigFile(privateVar, filePath, initialValue, config) {
    _classCallCheck(this, ConfigFile);

    if (privateVar !== PRIVATE_VAR) {
      throw new Error('Invalid invocation of new ConfigFile() use ConfigFile.get() instead');
    }

    this.config = config;
    this.filePath = filePath;
    this.initialValue = initialValue;
  }

  _createClass(ConfigFile, [{
    key: 'get',
    value: function () {
      var _ref = _asyncToGenerator(function* () {
        var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        return this._get(key, defaultValue, (yield Helpers.readFile(this.filePath, this.initialValue, this.config)));
      });

      function get() {
        return _ref.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: 'getSync',
    value: function getSync() {
      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return this._get(key, defaultValue, Helpers.readFileSync(this.filePath, this.initialValue, this.config));
    }
  }, {
    key: '_get',
    value: function _get(key, defaultValue, contents) {
      try {
        var value = ObjectPath.deepGet(contents, ObjectPath.split(key));
        if (typeof value === 'undefined') {
          return defaultValue;
        }
        return value;
      } catch (error) {
        return null;
      }
    }
  }, {
    key: 'set',
    value: function () {
      var _ref2 = _asyncToGenerator(function* (key, value) {
        var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        yield Helpers.writeFile(this.filePath, this._set(key, value, strict, (yield Helpers.readFile(this.filePath, this.initialValue, this.config))), this.config);
      });

      function set(_x5, _x6) {
        return _ref2.apply(this, arguments);
      }

      return set;
    }()
  }, {
    key: 'setSync',
    value: function setSync(key, value) {
      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      Helpers.writeFileSync(this.filePath, this._set(key, value, strict, Helpers.readFileSync(this.filePath, this.initialValue, this.config)), this.config);
    }
  }, {
    key: '_set',
    value: function _set(key, value) {
      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var contents = arguments[3];

      var _ObjectPath$getKeys = ObjectPath.getKeys(key),
          childKey = _ObjectPath$getKeys.childKey,
          parentKey = _ObjectPath$getKeys.parentKey;

      var parent = ObjectPath.deepNormalize(contents, ObjectPath.split(parentKey), strict);
      if (Array.isArray(parent)) {
        var index = parseInt(childKey, 10);
        if (index !== index) {
          throw new Error('Invalid write of non-numeric key on Array at \'' + key + '\'');
        }
        parent[index] = value;
      } else {
        parent[childKey] = value;
      }
      return contents;
    }
  }, {
    key: 'delete',
    value: function () {
      var _ref3 = _asyncToGenerator(function* (key) {
        var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        yield Helpers.writeFile(this.filePath, this._delete(key, strict, (yield Helpers.readFile(this.filePath, this.initialValue, this.config))), this.config);
      });

      function _delete(_x10) {
        return _ref3.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: 'deleteSync',
    value: function deleteSync(key) {
      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      Helpers.writeFileSync(this.filePath, this._delete(key, strict, Helpers.readFileSync(this.filePath, this.initialValue, this.config)), this.config);
    }
  }, {
    key: '_delete',
    value: function _delete(key) {
      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var contents = arguments[2];

      var _ObjectPath$getKeys2 = ObjectPath.getKeys(key),
          childKey = _ObjectPath$getKeys2.childKey,
          parentKey = _ObjectPath$getKeys2.parentKey;

      var parent = ObjectPath.deepNormalize(contents, ObjectPath.split(parentKey), strict);
      delete parent[childKey];
      return contents;
    }
  }, {
    key: 'append',
    value: function () {
      var _ref4 = _asyncToGenerator(function* (key, value) {
        var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        yield Helpers.writeFile(this.filePath, this._append(key, value, strict, (yield Helpers.readFile(this.filePath, this.initialValue, this.config))), this.config);
      });

      function append(_x14, _x15) {
        return _ref4.apply(this, arguments);
      }

      return append;
    }()
  }, {
    key: 'appendSync',
    value: function appendSync(key, value) {
      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      Helpers.writeFileSync(this.filePath, this._append(key, value, strict, Helpers.readFileSync(this.filePath, this.initialValue, this.config)), this.config);
    }
  }, {
    key: '_append',
    value: function _append(key, value) {
      var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var contents = arguments[3];

      var parent = ObjectPath.deepNormalize(contents, ObjectPath.split(key), strict);
      if (!Array.isArray(parent)) {
        var error = new Error('Invalid write of \'' + key + '\' when it\'s not an Array');
        // $FlowIgnore: Custom prop
        error.code = 'CONFIG_INVALID_ACCESS';
        throw error;
      }
      parent.push(value);
      return contents;
    }
  }], [{
    key: 'get',
    value: function () {
      var _ref5 = _asyncToGenerator(function* (filePath) {
        var givenInitialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var givenConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var config = Helpers.fillConfig(givenConfig || {});
        var initialValue = givenInitialValue || {};

        if (!(yield _sbFs2.default.exists(filePath)) && config.createIfNonExistent) {
          yield Helpers.writeFile(filePath, initialValue, config);
        }
        return new ConfigFile(PRIVATE_VAR, filePath, initialValue, config);
      });

      function get(_x19) {
        return _ref5.apply(this, arguments);
      }

      return get;
    }()
  }]);

  return ConfigFile;
}();

module.exports = ConfigFile;