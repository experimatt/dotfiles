'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _sbPromisify = require('sb-promisify');

var _sbPromisify2 = _interopRequireDefault(_sbPromisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var promisifiedFS = {};
var syncMethods = ['Stats', '_toUnixTimestamp', 'watch', 'watchFile', 'unwatchFile', 'createReadStream', 'ReadStream', 'FileReadStream', 'createWriteStream', 'WriteStream', 'FileWriteStream'];

for (var key in _fs2.default) {
  if (!{}.hasOwnProperty.call(_fs2.default, key)) {
    continue;
  }
  var value = _fs2.default[key];
  if (typeof value === 'function' && key.indexOf('Sync') === -1 && syncMethods.indexOf(key) === -1) {
    promisifiedFS[key] = (0, _sbPromisify2.default)(value);
  } else {
    promisifiedFS[key] = value;
  }
}

promisifiedFS.rimraf = (0, _sbPromisify2.default)(_rimraf2.default);
promisifiedFS.mkdirp = (0, _sbPromisify2.default)(_mkdirp2.default);
promisifiedFS.exists = function (path) {
  return new Promise(function (resolve) {
    _fs2.default.access(path, _fs2.default.R_OK, function (error) {
      resolve(error === null);
    });
  });
};
promisifiedFS.readFile = function (path) {
  return new Promise(function (resolve, reject) {
    _fs2.default.readFile(path, 'utf8', function (error, contents) {
      if (error) {
        reject(error);
      } else if (contents.charCodeAt(0) === 0xFEFF) {
        resolve(contents.slice(1));
      } else resolve(contents);
    });
  });
};

module.exports = promisifiedFS;