{"_id":"git-promise","_rev":"9-206e8004a1d75f2b534f04f90798e70c","name":"git-promise","description":"Simple wrapper to run any git command and process it's output using promises.","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.0":{"name":"git-promise","description":"Simple wrapper to run any git command and process it's output using promises.","version":"0.1.0","homepage":"https://github.com/piuccio/git-promise","author":{"name":"Fabio Crisci","email":"piuccio@gmail.com"},"repository":{"type":"git","url":"git://github.com/piuccio/git-promise.git"},"bugs":{"url":"https://github.com/piuccio/git-promise/issues"},"licenses":[{"type":"MIT","url":"https://github.com/piuccio/git-promise/blob/master/LICENSE"}],"main":"./index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"nodeunit test","cover":"istanbul cover node_modules/nodeunit/bin/nodeunit -- test"},"keywords":["git","shell"],"dependencies":{"q":"~1.0.1","shelljs":"~0.2.6"},"devDependencies":{"nodeunit":"~0.8.6"},"_id":"git-promise@0.1.0","dist":{"shasum":"49e29670036988e7c8263ce88a3c294c6a12262e","tarball":"https://registry.npmjs.org/git-promise/-/git-promise-0.1.0.tgz"},"_from":"./","_npmVersion":"1.4.3","_npmUser":{"name":"piuccio","email":"piuccio@gmail.com"},"maintainers":[{"name":"piuccio","email":"piuccio@gmail.com"}],"directories":{}},"0.2.0":{"name":"git-promise","description":"Simple wrapper to run any git command and process it's output using promises.","version":"0.2.0","homepage":"https://github.com/piuccio/git-promise","author":{"name":"Fabio Crisci","email":"piuccio@gmail.com"},"repository":{"type":"git","url":"git://github.com/piuccio/git-promise.git"},"bugs":{"url":"https://github.com/piuccio/git-promise/issues"},"licenses":[{"type":"MIT","url":"https://github.com/piuccio/git-promise/blob/master/LICENSE"}],"main":"./index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"nodeunit test","cover":"istanbul cover node_modules/nodeunit/bin/nodeunit -- test"},"keywords":["git","shell"],"dependencies":{"q":"~1.0.1","shelljs":"~0.3.0"},"devDependencies":{"nodeunit":"~0.8.6"},"_id":"git-promise@0.2.0","_shasum":"133b08061b1dbb14d77163dbb332379e13a22cfc","_from":"./","_npmVersion":"1.4.9","_npmUser":{"name":"piuccio","email":"piuccio@gmail.com"},"maintainers":[{"name":"piuccio","email":"piuccio@gmail.com"}],"dist":{"shasum":"133b08061b1dbb14d77163dbb332379e13a22cfc","tarball":"https://registry.npmjs.org/git-promise/-/git-promise-0.2.0.tgz"},"directories":{}},"0.3.0":{"name":"git-promise","description":"Simple wrapper to run any git command and process it's output using promises.","version":"0.3.0","homepage":"https://github.com/piuccio/git-promise","author":{"name":"Fabio Crisci","email":"piuccio@gmail.com"},"repository":{"type":"git","url":"git://github.com/piuccio/git-promise.git"},"bugs":{"url":"https://github.com/piuccio/git-promise/issues"},"licenses":[{"type":"MIT","url":"https://github.com/piuccio/git-promise/blob/master/LICENSE"}],"main":"./index.js","engines":{"node":">=0.10.0"},"scripts":{"test":"nodeunit test","cover":"istanbul cover node_modules/nodeunit/bin/nodeunit -- test"},"keywords":["git","shell"],"dependencies":{"q":"~1.4.1","shelljs":"~0.5.3"},"devDependencies":{"nodeunit":"~0.9.1"},"gitHead":"18f7642c4438264ec73a6264cedaa6a08cb31bb0","_id":"git-promise@0.3.0","_shasum":"3b72294e33c4c334146a845fffd7a3ce72967efd","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.4.0","_npmUser":{"name":"piuccio","email":"piuccio@gmail.com"},"dist":{"shasum":"3b72294e33c4c334146a845fffd7a3ce72967efd","tarball":"https://registry.npmjs.org/git-promise/-/git-promise-0.3.0.tgz"},"maintainers":[{"name":"piuccio","email":"piuccio@gmail.com"}],"directories":{}}},"readme":"# git-promise\r\n\r\nSimple wrapper that allows you to run any `git` command using a more intuitive syntax.\r\n\r\n## Getting Started\r\n\r\n```shell\r\nnpm install git-promise --save\r\n```\r\n\r\nOnce installed, you can use it in your JavaScript files like so:\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\n\r\ngit(\"rev-parse --abbrev-ref HEAD\").then(function (branch) {\r\n  console.log(branch); // This is your current branch\r\n});\r\n```\r\n\r\nThe module will handle exit code automatically, so\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\n\r\ngit(\"merge origin/master\").then(function () {\r\n  // Everything was fine\r\n}).fail(function (err) {\r\n  // Something went bad, maybe merge conflict?\r\n  console.error(err);\r\n});\r\n```\r\n\r\n`err` is an [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object augmented with `stdout` property. The following code:\r\n\r\n```js\r\ngit('clone http://example.org/notExistingExample.git').fail(function (err) {\r\n  console.log(\"MESSAGE\");\r\n  console.log(err.message);\r\n  console.log(\"STDOUT\");\r\n  console.log(err.stdout);\r\n});\r\n```\r\n\r\nwill log:\r\n\r\n```\r\nMESSAGE\r\n'git clone http://example.org/notExistingExample.git' exited with error code 128\r\nSTDOUT\r\nCloning into 'notExistingExample'...\r\nfatal: remote error: Repository does not exist\r\nThe requested repository does not exist, or you do not have permission to\r\naccess it.\r\n```\r\n\r\n## Advanced usage\r\n\r\nThe `git` command accepts a second parameter that can be used to parse the output or to deal with non 0 exit code.\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\n\r\ngit(\"status -sb\", function (stdout) {\r\n  return stdout.match(/## (.*)/)[1];\r\n}).then(function (branch) {\r\n  console.log(branch); // This is your current branch\r\n});\r\n```\r\n\r\nThe callback accepts 2 parameters, `(stdout, code)`, where `stdout` is the output of the git command and `code` is the exit code.\r\n\r\nThe return value of this function will be the resolved value of the promise.\r\n\r\nIf the `code` parameter is not specified, it'll be handled automatically and the promise will be rejected in case of non 0 code.\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\n\r\ngit(\"merge-base --is-ancestor master HEAD\", function (stdout, code) {\r\n  if (code === 0) {\r\n    // the branch we are on is fast forward to master\r\n    return true;\r\n  } else if (code === 1) {\r\n    // no, it's not\r\n    return false;\r\n  } else {\r\n    // some other error happened\r\n    throw new Error(\"Something bad happened: \" + stdout);\r\n  }\r\n}).then(function (isFastForward) {\r\n  console.log(isFastForward);\r\n}).fail(function (err) {\r\n  // deal with the error\r\n});\r\n```\r\n\r\n\r\n### Chaining commands\r\n\r\nImagine to be on a local branch which is not fast forward with master and you want to know which commit were pushed on master after the forking point:\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\n\r\nfunction findForkCommit () {\r\n  return git(\"merge-base master HEAD\", function (output) {\r\n    return output.trim();\r\n  });\r\n}\r\n\r\nfunction findChanges (forkCommit) {\r\n  return git(\"log \" + forkCommit + \"..master --format=oneline\", function (output) {\r\n    return output.trim().split(\"\\n\");\r\n  });\r\n}\r\n\r\n// synchronization can be done in many ways, for instance with Q\r\nvar Q = require(\"q\");\r\n[findForkCommit, findChanges].reduce(Q.when, Q({})).then(function (commits) {\r\n  console.log(commits);\r\n});\r\n\r\n// or simply using promises, simple cases only?\r\nfindForkCommit().then(findChanges).then(function (commits) {\r\n  console.log(commits);\r\n});\r\n```\r\n\r\n### Working directory\r\n\r\nBy default all git commands run in the current working directory (i.e. `process.cwd()`).\r\n\r\nYou can use the following syntax to run a git command in different folder\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\n\r\ngit(\"blame file1.js\", {cwd: \"src/\"}).then(function () {\r\n  // Blame someone\r\n});\r\n```\r\n\r\n### Custom git executable\r\n\r\nBy default any command tries to use `git` in `$PATH`, if you have installed `git` in a funky location you can override this value using `gitExec`.\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\n\r\ngit(\"status\", {gitExec: \"/usr/local/sbin/git\"}).then(function () {\r\n  // All good, I guess\r\n});\r\n```\r\n\r\n## Utility methods\r\n\r\nThis module comes with some utility methods to parse the output of some git commands\r\n\r\n```js\r\nvar util = require(\"git-promise/util\");\r\n```\r\n\r\n* `util.extractStatus(output [, lineSeparator])`\r\n\r\nParse the output of `git status --porcelain` and returns an object with\r\n\r\n```\r\n{\r\n  branch: \"current branch name, only if git status -b is used\",\r\n  index: {\r\n    modified: [\"list of files modified in the index\"],\r\n    added: [\"list of files added in the index\"],\r\n    deleted: [\"list of files deleted in the index\"],\r\n    renamed: [\"list of files renamed in the index\"],\r\n    copied: [\"list of files copied in the index\"]\r\n  },\r\n  workingTree: {\r\n    modified: [\"list of files modified in the local working tree\"],\r\n    added: [\"list of files added / renamed / copied in the local working tree\"],\r\n    deleted: [\"list of files deleted in the local working tree\"]\r\n  }\r\n}\r\n```\r\n\r\nThe method works both with or without option `-z`.\r\n\r\n* `util.hasConflict(output)`\r\n\r\nTry to determine if there's a merge conflict from the output of `git merge-tree`\r\n\r\n```js\r\nvar git = require(\"git-promise\");\r\nvar util = require(\"git-promise/util\");\r\n\r\ngit(\"merge-tree <root-commit> <branch1> <branch2>\").then(function (stdout) {\r\n  console.log(util.hasConflict(stdout));\r\n});\r\n```\r\n\r\n## Release History\r\n\r\n* 0.2.0 Change current working directory\r\n* 0.1.0 Just started\r\n","maintainers":[{"name":"piuccio","email":"piuccio@gmail.com"}],"time":{"modified":"2016-01-20T09:45:43.019Z","created":"2014-04-26T09:31:43.068Z","0.1.0":"2014-04-26T09:31:43.068Z","0.2.0":"2014-06-25T00:48:33.125Z","0.3.0":"2016-01-20T09:45:43.019Z"},"homepage":"https://github.com/piuccio/git-promise","keywords":["git","shell"],"repository":{"type":"git","url":"git://github.com/piuccio/git-promise.git"},"author":{"name":"Fabio Crisci","email":"piuccio@gmail.com"},"bugs":{"url":"https://github.com/piuccio/git-promise/issues"},"readmeFilename":"README.md","users":{"halyph":true,"lxanders":true},"_attachments":{},"_etag":"\"282A2IDXG2UZDU80K30MM2HA5\""}